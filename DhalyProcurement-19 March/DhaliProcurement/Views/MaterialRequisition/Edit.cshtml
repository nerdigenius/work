@*@model DhaliProcurement.Models.Proc_RequisitionMas*@
@using DhaliProcurement.Helper
@model DhaliProcurement.ViewModel.VMRequisitionMasterDetail
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    DhaliProcurement.Models.DCPSContext db = new DhaliProcurement.Models.DCPSContext();

    var taskCounter = 0;
}
<div class="row">
    <div class="col-md-12">
        <!-- Basic layout-->
        <div class="panel panel-flat">
            <div class="panel-heading">
                <h5 class="panel-title">
                    <i class="icon-stack-plus position-left"></i>Edit Materials Requisition
                    @if (Model.requisitionMaster.Status == "A")
                    {
                        <span class="badge badge-success">Approved</span>
                    }
                    else
                    {
                        <span class="badge badge-danger">Pending Approved</span>
                    }
                </h5><hr />
                <div class="heading-elements">
                    <ul class="icons-list">
                        <li><a data-action="collapse"></a></li>
                    </ul>
                </div>
            </div>
            <div class="panel-body">
                @using (Html.BeginForm())
                {

                    <table class="table">
                        <tr>
                            <td>Project Name</td>
                            <td>
                                @*@Html.DropDownList("ProjectId", null, "--Select--", htmlAttributes: new { @id = "ProjectId", @class = "form-control select2", @style = "width: 500px !important" })*@
                                <input type="text" value="@ViewBag.ProjectName" class="form-control" disabled="disabled" />
                                <input type="hidden" value="@ViewBag.ProjectId" id="ProjectId" />
                                <input type="hidden" value="@ViewBag.RequisitionMasId" id="RequisitionMasId" />
                                @*@ViewData["ReqMAsterId"] = ViewBag.RequisitionMasId;*@
                                @Html.ValidationMessage("ProjectId", "", new { @class = "text-danger" })
                            </td>
                            <td>Req. No.</td>
                            <td>
                                @Html.TextBox("Rcode", Model.requisitionMaster.Rcode, new { @class = "form-control" })
                                <span class="error" id="ReqNO_Error"></span>
                                @*<input type="text" value="@ViewBag.ReqNo" class="form-control" id="ReqNo"/>*@
                            </td>
                        </tr>
                        <tr>
                            <td>Site Name</td>
                            <td>
                                @*@Html.DropDownList("SiteId", null, "--Select--", htmlAttributes: new { @id = "SiteId", @class = "form-control select2", @style = "width: 500px !important" })*@
                                <input type="text" value="@ViewBag.SiteName" class="form-control" disabled="disabled" style="width:500px;" />
                                <input type="hidden" value="@ViewBag.SiteId" id="SiteId" />
                                @Html.ValidationMessage("SiteId", "", new { @class = "text-danger" })
                            </td>
                            <td>Requisition Date</td>
                            <td>
                                @*@Html.TextBox("ReqDate", NullHelper.DateToString(Model.requisitionMaster.ReqDate), new { @class = "form-control datepicker" })*@
                                @Html.TextBox("ReqDate", NullHelper.DateToString(Model.requisitionMaster.ReqDate), new { @class = "form-control datepicker" })
                                @*<input type="text" value="@ViewBag.ReqDate" class="form-control datepicker" id="ReqDate" />*@
                            </td>
                        </tr>
                        <tr>
                            <td>Site Engineer</td>
                            <td>
                                @Html.TextBox("SiteEngineer", null, new { @class = "form-control", disabled = "true" })
                            </td>
                        </tr>
                        <tr>
                            <td>Project Manager</td>
                            <td>
                                @Html.TextBox("ProjectManager", null, new { @class = "form-control", disabled = "true" })
                            </td>
                        </tr>
                        <tr>
                            <td>Remarks</td>
                            <td>
                                @Html.TextBox("Remarks", Model.requisitionMaster.Remarks, new { @class = "form-control" })
                                <span class="error" id="ProjectRemarks_Error"></span>
                            </td>
                        </tr>
                    </table>
                    <hr />
                    <div class="details well" style=" border 1px solid black;">
                        <h4>Requisition Items</h4>
                        <div class="jumbotron" style="padding:10px;">
                            <table class="table-responsive">
                                <tr style="text-align:center;">
                                    @*<td style="font-size: 15px; font-weight: bold;">Sl. No.</td>*@
                                    <td style="font-weight: bold;">Required Materials</td>
                                    <td>
                                        @Html.DropDownList("ItemName", null, "--Select--", htmlAttributes: new { @class = "form-control", @data_required = "required", @id = "ItemName" })
                                    </td>
                                    <td style="font-weight: bold;">Unit</td>
                                    <td>
                                        @*@Html.DropDownList("Unit", null, "Select unit", htmlAttributes: new { @class = "form-control select2", @data_required = "required", @style = "width: 150px;" })*@
                                        @Html.TextBox("Unit", "", new { @disabled = "disabled", @class = "form-control", @id = "UnitName" })
                                        <input type="hidden" value="" id="UnitId" />
                                    </td>
                                    <td style="font-weight: bold;">Total Required</td>
                                    <td>
                                        <input type="text" id="TotalRequired" class="form-control" disabled="disabled" />
                                    </td>
                                    <td style="font-weight: bold;">Total Received</td>
                                    <td>
                                        <input type="text" id="TotalReceived" class="form-control" disabled="disabled" />
                                    </td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td><span class="error" id="ItemName_Error">Item name required</span></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                </tr>
                                <tr style="text-align:center;">
                                    <td style="font-weight: bold;">Remaining</td>
                                    <td>
                                        <input type="text" id="RemainingBalance" class="form-control" disabled="disabled" />
                                    </td>
                                    <td style="font-weight: bold;">Current Stock</td>
                                    <td>
                                        <input type="text" id="CurrentStock" class="form-control" />
                                    </td>
                                    <td style="font-weight: bold;">Required Before(Date)</td>
                                    <td>
                                        <input type="text" id="RequiredDate" class="form-control datepicker" />
                                    </td>
                                    <td style="font-weight: bold;">Req. Qty</td>
                                    <td>
                                        <input type="text" id="ReqQty" class="form-control" />
                                    </td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td><span class="error" id="CurrentStock_Error">Curren stock must be a numeric value</span> </td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td>
                                        <span class="error" id="ReqQty_Error">Req Qty must be a numeric value</span>
                                        <span class="error" id="ReqQty_Error2">Req Qty required</span>
                                    </td>
                                </tr>
                                <tr style="text-align:center;">
                                    <td style="font-weight: bold;">Brand/Quantity</td>
                                    <td>
                                        <input type="text" id="Brand" class="form-control" />
                                        <span class="error" id="Brand_Error"></span>
                                    </td>
                                    <td style="font-weight: bold;">Size</td>
                                    <td>
                                        <input type="text" id="Size" class="form-control" />
                                        <span class="error" id="Size_Error"></span>
                                    </td>
                                    <td style="font-weight: bold;">Remarks</td>
                                    <td>
                                        <input type="text" id="ItemRemarks" class="form-control" />
                                        <span class="error" id="ItemRemarks_Error"></span>
                                    </td>
                                    <td>
                                        <input type="button" id="addNewRow" value="ADD" class="btn btn-primary btn-sm" style="background-color: grey;border: none;" />
                                    </td>
                                    <td>&nbsp;</td>
                                </tr>
                            </table>
                            <br />
                            <div class="table-responsive scrolling">
                                <table class="Resource-list table table-bordered" id="RequisitionDetails">
                                    <thead>
                                        <tr class="bg-grey">
                                            @*<th>Sl. No.</th>*@
                                            <th>Required Materials</th>
                                            <th>Unit</th>
                                            <th>Total Required</th>
                                            <th>Total Received</th>
                                            <th>Remaining</th>
                                            <th>Current Stock</th>
                                            <th>Req. Qty</th>
                                            <th>Required Before(Date)</th>
                                            <th>Brand/Quantity</th>
                                            <th>Size</th>
                                            <th>Remarks</th>
                                            <th>&nbsp;</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Model.requisitionDetail)
                                        {
                                            taskCounter++;
                                            <tr>
                                                <td>
                                                    <input type="hidden" value="@taskCounter" name="TaskIdForDuplicateCheck" />
                                                    <input type="hidden" value="@item.Id" name="TaskId" />
                                                    @{
                                                        var itemName = db.Item.SingleOrDefault(x => x.Id == item.ItemId);
                                                    }
                                                    <label name="label_ItemName" style="width:200px;">@itemName.Name</label>
                                                    <input class="form-control" value="@itemName.Name" type="hidden" name="ItemName" style="width:90px;" disabled="disabled" />
                                                    <input type="hidden" value="@item.ItemId" class="form-control" name="ItemId" />
                                                </td>
                                                <td>
                                                    @{
                                                        var unit = (from requisitionDet in db.Proc_RequisitionDet
                                                                    join requisitionMas in db.Proc_RequisitionMas on requisitionDet.Proc_RequisitionMasId equals requisitionMas.Id
                                                                    join procProject in db.ProcProject on requisitionMas.ProcProjectId equals procProject.Id
                                                                    join ProcProjectItem in db.ProcProjectItem on procProject.Id equals ProcProjectItem.ProcProjectId
                                                                    join units in db.Unit on ProcProjectItem.UnitId equals units.Id
                                                                    where requisitionDet.ItemId == ProcProjectItem.ItemId && requisitionDet.Id == item.Id
                                                                    select units).SingleOrDefault();
                                                    }
                                                    <label name="label_ItemUnit">@unit.Name</label>
                                                    <input type="hidden" value="@unit.Name" class="form-control" name="ItemUnit" style="width:80px;" disabled="disabled" />
                                                    <input type="hidden" value="@unit.Id" class="form-control" name="UnitId" />
                                                </td>
                                                <td>
                                                    @{
                                                        int sid = ViewBag.SiteId;
                                                        int pid = ViewBag.ProjectId;
                                                        int itemid = item.ItemId;
                                                        var totalRequired = (from procProjectItem in db.ProcProjectItem
                                                                             join procproject in db.ProcProject on procProjectItem.ProcProjectId equals procproject.Id
                                                                             join site in db.ProjectSite on procproject.ProjectSiteId equals site.Id
                                                                             join project in db.Project on site.ProjectId equals project.Id
                                                                             where procProjectItem.ItemId == itemid && project.Id == pid && site.Id == sid
                                                                             select procProjectItem).FirstOrDefault();
                                                    }
                                                    <label name="label_TotalRequired">@totalRequired.PQuantity</label>
                                                    <input type="hidden" value="@totalRequired.PQuantity" class="form-control" name="TotalRequired" disabled="disabled" style="width:90px;" />
                                                </td>
                                                <td>
                                                    @{
                                                        decimal total = 0;
                                                        var totalReceived = (from entryDet in db.Proc_MaterialEntryDet
                                                                             join entryMas in db.Proc_MaterialEntryMas on entryDet.Proc_MaterialEntryMasId equals entryMas.Id
                                                                             join purchaseDet in db.Proc_PurchaseOrderDet on entryDet.Proc_PurchaseOrderDetId equals purchaseDet.Id
                                                                             join purchaseMas in db.Proc_PurchaseOrderMas on purchaseDet.Proc_PurchaseOrderMasId equals purchaseMas.Id
                                                                             join procProject in db.ProcProject on entryMas.ProcProjectId equals procProject.Id
                                                                             join procProjectItem in db.ProcProjectItem on procProject.Id equals procProjectItem.ProcProjectId
                                                                             where entryDet.Proc_PurchaseOrderDet.ItemId == item.ItemId && procProject.ProjectSiteId == sid
                                                                             select entryDet).Distinct().ToList();

                                                        foreach (var i in totalReceived)
                                                        {
                                                            total = total + i.EntryQty;
                                                        }
                                                    }
                                                    <label name="label_TotalReceived">@total </label>
                                                    <input type="hidden" value="@total" class="form-control" name="TotalReceived" disabled="disabled" style="width:90px;" />
                                                    @*<input type="text" value="@totalReceived.EntryQty" class="form-control" name="TotalReceived" disabled="disabled" />*@
                                                </td>
                                                <td>
                                                    @{


                                                        var remaining = totalRequired.PQuantity - total;
                                                    }
                                                    <label name="label_RemainingBalance">@remaining </label>
                                                    <input type="hidden" value="@remaining" class="form-control" name="RemainingBalance" disabled="disabled" style="width:90px;" />
                                                </td>
                                                <td>
                                                    <label name="label_CStockQty">@item.CStockQty</label>
                                                    <input type="hidden" value="@item.CStockQty" class="form-control" name="CStockQty" style="width:80px;" />
                                                </td>
                                                <td>
                                                    <label name="label_ReqQty">@item.ReqQty</label>
                                                    <input type="hidden" value="@item.ReqQty" class="form-control" name="ReqQty" style="width:80px;" />
                                                </td>
                                                <td>
                                                    @{
                                                        var requiredDate = NullHelper.DateToString(item.RequiredDate);
                                                    }
                                                    <label name="label_RequiredDate">@requiredDate</label>
                                                    <input type="hidden" value="@requiredDate" class="form-control datepicker" name="RequiredDate" style="width:80px;" />
                                                </td>
                                                <td>
                                                    <label name="label_Brand">@item.Brand</label>
                                                    <input type="hidden" value="@item.Brand" class="form-control" name="Brand" style="width:90px;" />
                                                </td>
                                                <td>
                                                    <label name="label_Size">@item.Size</label>
                                                    <input type="hidden" value="@item.Size" class="form-control" name="Size" style="width:80px;" />
                                                </td>
                                                <td>
                                                    <label name="label_ItemRemarks">@item.Remarks</label>
                                                    <input type="hidden" value="@item.Remarks" class="form-control" name="ItemRemarks" style="width:80px;" />
                                                </td>
                                                <td>
                                                    @*@{
                                                            var check = db.Proc_TenderDet.Where(x => x.Proc_RequisitionDetId == item.Id).ToList();

                                                            if (check.Count == 0)
                                                            {
                                                                <button type="button" id="editSite" class="btn text-primary-400 btn-flat btn-icon btn-rounded  btn-xs editSite " data-toggle="modal" data-target="#detailForm"><i class="icon-pencil"></i></button>
                                                            }

                                                        }*@
                                                    @{
                                                        var check = db.Proc_TenderDet.Where(x => x.Proc_RequisitionDetId == item.Id).ToList();
                                                        var Checkflag = 0;
                                                        if (check.Count == 0)
                                                        {
                                                            <input type="hidden" name="Checkflag" value="0" />
                                                        }
                                                        else
                                                        {
                                                            <input type="hidden" name="Checkflag" value="1" />
                                                        }

                                                    }
                                                    <button type="button" id="editSite" class="btn text-primary-400 btn-flat btn-icon btn-rounded  btn-xs editSite " data-toggle="modal" data-target="#detailForm"><i class="icon-pencil"></i></button>
                                                    <button type="button" class="btn  text-warning-600 btn-flat btn-icon btn-rounded deleteRequisitionItem"><i class="icon-cross"></i></button>
                                                    @*<input type="button" class="btn btn-danger btn-xs deleteRequisitionItem" value="Delete"/>*@
                                                    @*<input type="button" class="btn btn-danger btn-xs deleteItem" value="Delete" onclick="$(this).parent().parent().remove();" />*@
                                                    @*<span class="btn text-warning-600 btn-flat btn-icon btn-rounded" onclick="RemoveTask(@item.Id)"><i class="icon-cross"></i></span>*@
                                                </td>
                                            </tr>
                                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                                                        }
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-12" style="text-align:center;">
            @if (User.IsInRole("Management"))
            {
                if (Model.requisitionMaster.Status.Trim() == "A")
                {
                    <button type="button" id="SaveItem" class="btn btn-success"><i class="icon-floppy-disk position-left"></i>Update</button>
                }
                else
                {
                    <button type="button" id="SaveItem" class="btn btn-success"><i class="icon-floppy-disk position-left"></i>Update</button>
                    <button type="button" id="ApproveItem" class="btn btn-warning"><i class="icon-select2 position-left"></i>Approve</button>
                }
            }
            else
            {
                if (Model.requisitionMaster.Status.Trim() == "A")
                {
                    <button type="button" id="SaveItem" class="btn btn-success"><i class="icon-floppy-disk position-left"></i>Update</button>
                }
                else
                {

                    <button type="button" id="ApproveItem" class="btn btn-warning" disabled="disabled"><i class="icon-select2 position-left"></i>Pending Approval</button>
                }
            }
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="detailForm" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog" role="document" style="overflow-y: scroll; max-height:85%;  margin-top: 50px; margin-bottom:50px;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staffModalTitle">Edit Item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="panel-body">
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        <div class="form-group">
                            <input type="hidden" id="ModalTaskId" />
                            <input type="hidden" id="ProjectId" value="" />
                        </div>
                        <div class="form-group">
                            @Html.Label("Item Name", htmlAttributes: new
                       {
                           @class = "control-label col-md-2"@*, @style="font-weight:bold;"*@ })
                            <div class="col-md-10">
                                @Html.DropDownList("ItemName", null, "--Select--", htmlAttributes: new { @class = "form-control select2", @data_required = "required", @id = "ModalItemName", @style = "width: 150px;" })
                                <span class="error" id="ModalItemName_Error"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Unit", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <input type="hidden" id="modalunitId" />
                                @Html.TextBox("ModalUnitName", null, new { @class = "form-control", @disabled = "disabled" })
                                @*@Html.DropDownList("Unit", null, "Select unit", htmlAttributes: new { @class = "form-control select2", @id = "ModalUnit", @data_required = "required", @style = "width: 150px;" })*@
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Total Required", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalTotalRequired", null, new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Total Received", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalTotalReceived", null, new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Remaining Balance", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalRemainingBalance", null, new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("CurrentStock", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalCurrentStock", null, new { @class = "form-control" })
                                <span class="error" id="ModalCurrentStock_Error"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Req Qty", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalQty", null, new { @class = "form-control" })
                                <span class="error" id="ModalQty_Error"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Required Date", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalRequiredDate", null, new { @class = "form-control datepicker" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Brand", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalBrand", null, new { @class = "form-control" })
                                <span class="error" id="ModalBrand_Error"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Size", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalSize", null, new { @class = "form-control" })
                                <span class="error" id="ModalSize_Error"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Remarks", htmlAttributes: new { @class = "control-label col-md-2" })
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="col-md-10">
                                @Html.TextBox("ModalRemarks", null, new { @class = "form-control" })
                                <span class="error" id="ModalRemarks_Error"></span>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="submit" class="btn btn-primary" id="ModalDetailSave">Save</button>
                                <button type="button" class="btn btn-secondary" data-dismiss="modal" id="ModalClose">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    var counter = 0;
    var selRow;
    var TaskCounter = 0;

    $(document).ready(function () {
        RebindDatePicker();
        $(".select2").select2();

        $('#ReqNO_Error').hide();
        $('#ProjectRemarks_Error').hide();
        $('#ItemName_Error').hide();
        $('#CurrentStock_Error').hide();
        $('#ReqQty_Error').hide();
        $('#ReqQty_Error2').hide();
        $('#Brand_Error').hide();
        $('#Size_Error').hide();
        $('#ItemRemarks_Error').hide();

        //RebindDatePicker();

        $('#ModalItemName_Error').hide();
        $('#ModalCurrentStock_Error').hide();
        $('#ModalQty_Error').hide();
        $('#ModalBrand_Error').hide();
        $('#ModalSize_Error').hide();
        $('#ModalRemarks_Error').hide();

        TaskCounter = @taskCounter;
        //alert(TaskCounter);
    });

    $("#ItemName").change(function () {
        var ItemId = $('#ItemName option:selected').val();
        var ProjectId = $('#ProjectId').val();
        var SiteId = $('#SiteId').val();

        if (ProjectId == "" && SiteId == "") {
            alert('Please Select Project Id and Site Id');
        }

        if ($('#ItemName option:selected').text() == "--Select--")
        {
            $('#UnitId').val("");
            $('#UnitName').val("");
            $('#TotalRequired').val("");
            $('#TotalReceived').val("");
            $('#RemainingBalance').val("");
        }
        else{
            $.ajax({
                type: "post",
                url: "/MaterialRequisition/GetUnit",
                data: { ItemId, ProjectId, SiteId },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    $('#UnitId').val(data.UnitId);
                    $('#UnitName').val(data.UnitName);
                    $('#TotalRequired').val(data.TotalRequired);
                    $('#TotalReceived').val(data.TotalReceived);
                    var totalRequied = $('#TotalRequired').val();
                    var totalReceived = $('#TotalReceived').val();
                    if (totalReceived == "") {
                        totalReceived = 0;
                    }
                    var remaining = totalRequied - totalReceived
                    $('#RemainingBalance').val(remaining);
                }

            });
        }


    });

    //add new row
    $('#addNewRow').click(function (event) {
        event.preventDefault();
        counter++;

        var isAllValid = true;
        var ItemId = $('#ItemName option:selected').val();
        //alert(ItemId);
        var ItemName = $('#ItemName option:selected').text();
        //alert(ItemName);
        //var Qty = $('#Qty').val();
        var Unit = $('#UnitName').val();
        //var Unit = $('#Unit option:selected').text();

        var UnitId = $('#UnitId').val();
        var TotalRequired = $('#TotalRequired').val();
        var TotalReceived = $('#TotalReceived').val();
        var RemainingBalance = $('#RemainingBalance').val();
        var CurrentStock = $('#CurrentStock').val();
        var ReqQty = $('#ReqQty').val();
        var Brand = $('#Brand').val();
        var Size = $('#Size').val();
        var requiredDate = $('#RequiredDate').val();
        var ItemRemarks = $('#ItemRemarks').val();

        if (ItemName == "" || ItemName == "--Select--") {
            $('#ItemName_Error').text("Item required").show();
            isAllValid = false;
        }
        else {

            $('#ItemName_Error').hide();
        }

        if (CurrentStock != "") {
            if (isNaN(CurrentStock)) {
                $('#CurrentStock_Error').show();
                isAllValid = false;
            }
            else {
                if (CurrentStock.length > 18) {
                    isAllValid = false;
                    $('#CurrentStock_Error').text("Current stock cannot be greater than 18 characters!").show();
                }
                else {
                    $('#CurrentStock_Error').hide();
                }
            }
        }
        else {
            $('#CurrentStock_Error').hide();
        }

        if (ReqQty == "") {
            $('#ReqQty_Error2').show();
            isAllValid = false;
        }
        else {
            $('#ReqQty_Error2').hide();
        }
        if (isNaN(ReqQty)) {
            $('#ReqQty_Error').show();
            isAllValid = false;
        }
        else {
            $('#ReqQty_Error').hide();
        }
        if (Brand.trim().length > 50) {
            isAllValid = false;
            $('#Brand_Error').text("Brand cannot be greater than 50 characters!").show();
        }
        else {
            $('#Brand_Error').hide();
        }
        if (Size.trim().length > 50) {
            isAllValid = false;
            $('#Size_Error').text("Size cannot be greater than 50 characters!").show();
        }
        else {
            $('#Size_Error').hide();
        }
        if (ItemRemarks.trim().length > 50) {
            isAllValid = false;
            $('#ItemRemarks_Error').text("Remarks can not be greater than 50 characters!").show();
        }
        else {
            $('#ItemRemarks_Error').hide();
        }

        //$('table.Resource-list tr').each(function () {
        //    var name = $(this).find("td input[name=ItemName]").val();
        //    //alert(name);
        //    ItemName = $('#ItemName option:selected').text();
        //    //alert('This name: ' + ItemName);
        //    if (ItemName == name) {
        //        alert('This item already exists!');
        //        isAllValid = false;
        //    }

        //});


        $('table.Resource-list tbody tr').each(function () {
            var name = $(this).find("td input[name=ItemId]").val();
            //alert(name);
            if (ItemId.trim() == name.trim()) {
                alert('This item already exists!');
                isAllValid = false;
            }

        });


        if (isAllValid) {
            TaskCounter++;
            var newRow = jQuery('<tr>'
                    + '<td><input type="hidden" name="TaskIdForDuplicateCheck" value="' + TaskCounter + '"/> <input value="' + ItemId + '" type="hidden" name="ItemId"/><label name="label_ItemName">' + ItemName + '</label> <input class="form-control" value="' + ItemName + '" type="hidden" name="ItemName"  style="width:80px;"/><input type="hidden" value="0" name="TaskId"></td>'
                    //+ '<td><input type="hidden" value="' + UnitId + '" type="text" name="UnitId"/></td>'
                    + '<td><input value="' + UnitId + '" type="hidden" name="UnitId"/><label name="label_ItemUnit">' + Unit + '</label> <input class="form-control" value="' + Unit + '" type="hidden" name="ItemUnit"  style="width:80px;"/></td>'
                    + '<td><input class="form-control" value="' + TotalRequired + '"  type="hidden" name="TotalRequired"/><label name="label_TotalRequired">' + TotalRequired + '</label></td>'
                    + '<td><input class="form-control" value="' + TotalReceived + '"  type="hidden" name="TotalReceived"/><label name="label_TotalReceived">' + TotalReceived + '</label></td>'
                    + '<td><input class="form-control" value="' + RemainingBalance + '"  type="hidden" name="RemainingBalance"/><label name="label_RemainingBalance">' + RemainingBalance + '</label></td>'
                    + '<td><input class="form-control" value="' + CurrentStock + '"  type="hidden" name="CStockQty" style="width:80px;"/><label name="label_CStockQty">' + CurrentStock + '</label></td>'
                    + '<td><input class="form-control" value="' + ReqQty + '"  type="hidden" name="ReqQty" style="width:80px;"/><label name="label_ReqQty">' + ReqQty + '</label></td>'
                    + '<td><input class="form-control datepicker" value="' + requiredDate + '" type="hidden" name="RequiredDate"/><label name="label_RequiredDate">' + requiredDate + '</label></td>'
                    + '<td><input class="form-control" value="' + Brand + '"  type="hidden" name="Brand" style="width:80px;"/><label name="label_Brand">' + Brand + '</label></td>'
                    + '<td><input class="form-control" value="' + Size + '"  type="hidden" name="Size"style="width:80px;"/><label name="label_Size">' + Size + '</label></td>'
                    + '<td><input class="form-control" value="' + ItemRemarks + '" type="hidden" name="ItemRemarks"/><label name="label_ItemRemarks">' + ItemRemarks + '</label></td>'
                    //+ '</td><td> <input type="button" class="btn btn-danger btn-xs deleteItem" value="Delete" onclick="$(this).parent().parent().remove();" /></td></tr>');
                    + '<td>'
                     + '<input type="hidden" name="Checkflag" value="0" /><button type="button" id="editSite" class="btn text-primary-400 btn-flat btn-icon btn-rounded  btn-xs editSite " data-toggle="modal" data-target="#detailForm"><i class="icon-pencil"></i></button>'
                     + ' <button type="button" class="btn text-warning-600 btn-flat btn-icon btn-rounded" onclick="$(this).parent().parent().remove();"><i class="icon-cross"></i></button>'
                     + '</td></tr>');


            jQuery('table.Resource-list tbody').append(newRow);

            RebindItemName();

            $('#ItemName').val("");
            $('#UnitName').val("");
            $('#TotalRequired').val("");
            $('#TotalReceived').val("");
            $('#RemainingBalance').val("");
            $('#CurrentStock').val("");
            $('#ReqQty').val("");
            $('#Brand').val("");
            $('#Size').val("");
            $('#RequiredDate').val("");
            $('#ItemRemarks').val("");

            RebindDatePicker();


            $('.editSite').click(function () {
                var row = $(this).closest('tr');
                selRow = $(this).closest('tr');
                var TaskId = row.find('input[name=TaskIdForDuplicateCheck]').val();
                var itemName = row.find('input[name=ItemName]').val();
                var itemId = row.find('input[name=ItemId]').val();
                var ItemUnit = row.find('input[name=ItemUnit]').val();
                var UnitId = row.find('input[name=UnitId]').val();
                var TotalRequired = row.find('input[name=TotalRequired]').val();
                var TotalReceived = row.find('input[name=TotalReceived]').val();
                var RemainingBalance = row.find('input[name=RemainingBalance]').val();
                var CurrentStock = row.find('input[name=CStockQty]').val();
                var ReqQty = row.find('input[name=ReqQty]').val();
                var RequiredDate = row.find('input[name=RequiredDate]').val();
                var Brand = row.find('input[name=Brand]').val();
                var Size = row.find('input[name=Size]').val();
                var ItemRemarks = row.find('input[name=ItemRemarks]').val();


                var Checkflag = row.find('input[name=Checkflag]').val();

                //alert(Checkflag);

                if(Checkflag==0)
                {
                    $('#ModalItemName').removeAttr("disabled");
                }
                else{
                    $("#ModalItemName").attr("disabled", "true");
                }

                $('#ModalTaskId').val(TaskId);
                $('#ModalItemName').val(itemId).change();
                $('#modalunitId').val(UnitId);
                $('#ModalUnitName').val(ItemUnit);
                $('#ModalTotalRequired').val(TotalRequired);
                $('#ModalTotalReceived').val(TotalReceived);
                $('#ModalRemainingBalance').val(RemainingBalance);
                $('#ModalCurrentStock').val(CurrentStock);
                $('#ModalQty').val(ReqQty);
                $('#ModalRequiredDate').val(RequiredDate);
                $('#ModalBrand').val(Brand);
                $('#ModalSize').val(Size);
                $('#ModalRemarks').val(ItemRemarks);

            });

        }

        //var newRow = jQuery('<tr><td class="index"><label name="TaskId">' + counter + '</label></td>'
        //    + '<td><input value="' + ItemId + '" type="hidden" name="ItemId"/> <input class="form-control" value="' + ItemName + '" type="hidden" name="ItemName' + counter + '"/><label>' + ItemName + '<label></td>'
        //    //+ '<td><input type="hidden" value="' + UnitId + '" type="text" name="UnitId"/></td>'
        //    + '<td><input value="' + UnitId + '" type="hidden" name="UnitId"/><label>' + Unit + '</label></td>'
        //    + '<td><input class="form-control" value="' + TotalRequired + '"  type="text" name="TotalRequired"/></td>'
        //    + '<td><input class="form-control" value="' + TotalReceived + '"  type="text" name="TotalReceived"/></td>'
        //    + '<td><input class="form-control" value="' + RemainingBalance + '"  type="text" name="RemainingBalance"/></td>'
        //    + '<td><input class="form-control" value="' + CurrentStock + '"  type="text" name="CurrentStock"/></td>'
        //    + '<td><input class="form-control" value="' + ReqQty + '"  type="text" name="ReqQty" style="width:80px;"/></td>'
        //    + '<td><input class="form-control" value="' + Brand + '"  type="text" name="Brand" style="width:80px;"/></td>'
        //    + '<td><input class="form-control" value="' + Size + '"  type="text" name="Size"style="width:80px;"/></td>'
        //    + '<td><input class="form-control" value="' + ItemRemarks + '" type="text" name="ItemRemarks"/>'
        //    + '</td> <td> <input type="button" class="btn btn-danger btn-xs" value="Delete" onclick="$(this).parent().parent().remove();" /></td></tr>');

    });


    $('.editSite').click(function () {
        var row = $(this).closest('tr');
        selRow = $(this).closest('tr');

        var TaskId = row.find('input[name=TaskIdForDuplicateCheck]').val();
        var itemName = row.find('input[name=ItemName]').val();
        var itemId = row.find('input[name=ItemId]').val();
        var ItemUnit = row.find('input[name=ItemUnit]').val();
        var UnitId = row.find('input[name=UnitId]').val();
        var TotalRequired = row.find('input[name=TotalRequired]').val();
        var TotalReceived = row.find('input[name=TotalReceived]').val();
        var RemainingBalance = row.find('input[name=RemainingBalance]').val();
        var CurrentStock = row.find('input[name=CStockQty]').val();
        var ReqQty = row.find('input[name=ReqQty]').val();
        var RequiredDate = row.find('input[name=RequiredDate]').val();
        var Brand = row.find('input[name=Brand]').val();
        var Size = row.find('input[name=Size]').val();
        var ItemRemarks = row.find('input[name=ItemRemarks]').val();
        //$('#ModalItemName').val(SiteName);

        var Checkflag = row.find('input[name=Checkflag]').val();

        //alert(Checkflag);

        if(Checkflag==0)
        {
            $('#ModalItemName').removeAttr("disabled");
        }
        else{
            $("#ModalItemName").attr("disabled", "true");
        }

        $('#ModalTaskId').val(TaskId);
        $('#ModalItemName').val(itemId).change();
        $('#modalunitId').val(UnitId);
        $('#ModalUnitName').val(ItemUnit);
        $('#ModalTotalRequired').val(TotalRequired);
        $('#ModalTotalReceived').val(TotalReceived);
        $('#ModalRemainingBalance').val(RemainingBalance);
        $('#ModalCurrentStock').val(CurrentStock);
        $('#ModalQty').val(ReqQty);
        $('#ModalRequiredDate').val(RequiredDate);
        $('#ModalBrand').val(Brand);
        $('#ModalSize').val(Size);
        $('#ModalRemarks').val(ItemRemarks);

    });



    $("#ModalItemName").change(function () {
        var ItemId = $('#ModalItemName option:selected').val();
        //alert(ItemId);
        var ProjectId = $('#ProjectId').val();
        var SiteId = $('#SiteId').val();

        if (ProjectId == "" && SiteId == "") {
            alert('Please Select Project Id and Site Id');
        }

        if ($('#ModalItemName option:selected').text() == "--Select--")
        {
            $('#modalunitId').val("");
            $('#ModalUnitName').val("");
            $('#ModalTotalRequired').val("");
            $('#ModalTotalReceived').val("");
            $('#ModalRemainingBalance').val("");
        }

            //alert(ProjectId);
            //alert(SiteId);
        else{
            $.ajax({
                type: "post",
                url: "/MaterialRequisition/GetUnit",
                data: { ItemId, ProjectId, SiteId },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    $('#modalunitId').val(data.UnitId);
                    $('#ModalUnitName').val(data.UnitName);
                    $('#ModalTotalRequired').val(data.TotalRequired);
                    //alert(data.TotalReceived);
                    $('#ModalTotalReceived').val(data.TotalReceived);
                    //$('#TotalReceived').val(0);
                    var TotalRequired = $('#ModalTotalRequired').val();
                    var TotalReceived = $('#ModalTotalReceived').val();
                    var RemainingBalance = TotalRequired - TotalReceived;

                    $('#ModalRemainingBalance').val(RemainingBalance);
                }

            });
        }


    });

    $('#ModalDetailSave').click(function () {
        var isValidItem = true;

        var TaskId = $('#ModalTaskId').val();
        var ItemName = $('#ModalItemName option:selected').text();
        var ItemId = $('#ModalItemName option:selected').val();
        var Unitid = $('#modalunitId').val();
        var UnitName = $('#ModalUnitName').val();
        var ModalTotalRequired = $('#ModalTotalRequired').val();
        var ModalTotalReceived = $('#ModalTotalReceived').val();
        var ModalRemainingBalance = $('#ModalRemainingBalance').val();
        var ModalCurrentStock = $('#ModalCurrentStock').val();
        var Qty = $('#ModalQty').val();
        var ModalRequiredDate = $('#ModalRequiredDate').val();
        var ModalBrand = $('#ModalBrand').val();
        var ModalSize = $('#ModalSize').val();
        var Remarks = $('#ModalRemarks').val();

        if (ItemName.trim() == "--Select--") {
            isValidItem = false;
            $('#ModalItemName_Error').text("Item Name required").show();
        }
        else {
            $('#ModalItemName_Error').hide();
        }

        if (ModalCurrentStock.trim() != "") {
            if (isNaN(ModalCurrentStock.trim())) {
                isValidItem = false;
                $('#ModalCurrentStock_Error').text("Current Stock must be a numeric value").show();
            }
            else {

                if (ModalCurrentStock.length > 18) {
                    isAllValid = false;
                    $('#ModalCurrentStock_Error').text("Current stock cannot be greater than 18 characters!").show();
                }
                else {
                    $('#ModalCurrentStock_Error').hide();
                }
            }
        }
        else {
            $('#ModalCurrentStock_Error').hide();
        }
        if (Qty.trim() == "") {
            isValidItem = false;
            $('#ModalQty_Error').text("Qty required").show();

        }
        else {
            $('#ModalQty_Error').hide();
        }

        if (Qty.trim() != "") {
            if (isNaN(Qty.trim())) {
                isValidItem = false;
                $('#ModalQty_Error').text("Req Qty must be a numeric value").show();
            }
            else {
                $('#ModalQty_Error').hide();
            }
        }
        if (ModalBrand.trim().length > 50) {
            isValidItem = false;
            $('#ModalBrand_Error').text("Brand cannot be greater than 50 characters!").show();
        }
        else {
            $('#ModalBrand_Error').hide();
        }
        if (ModalSize.trim().length > 50) {
            isValidItem = false;
            $('#ModalSize_Error').text("Size cannot be greater than 50 characters!").show();
        }
        else {
            $('#ModalSize_Error').hide();
        }
        if (Remarks.trim().length > 50) {
            isValidItem = false;
            $('#ModalRemarks_Error').text("Remarks cannot be greater than 50 characters!").show();
        }
        else {
            $('#ModalRemarks_Error').hide();
        }

        //validation for checking duplicate item
        $('table.Resource-list tbody tr').each(function () {
            var name = $(this).find("td input[name=ItemId]").val();
            var task = $(this).find("td input[name=TaskIdForDuplicateCheck]").val();


            if (task != TaskId.trim()) {
                if (ItemId.trim() == name.trim()) {
                    alert('This item already exists!');
                    isValidItem = false;
                }
            }
        });

        if (isValidItem) {

            selRow.find('input[name=ItemName]').val(ItemName);
            selRow.find('input[name=ItemId]').val(ItemId);
            selRow.find('input[name=ItemUnit]').val(UnitName);
            selRow.find('input[name=UnitId]').val(Unitid);
            selRow.find('input[name=TotalRequired]').val(ModalTotalRequired);
            selRow.find('input[name=TotalReceived]').val(ModalTotalReceived);
            selRow.find('input[name=RemainingBalance]').val(ModalRemainingBalance);
            selRow.find('input[name=CStockQty]').val(ModalCurrentStock);
            selRow.find('input[name=ReqQty]').val(Qty);
            selRow.find('input[name=RequiredDate]').val(ModalRequiredDate);
            selRow.find('input[name=Brand]').val(ModalBrand);
            selRow.find('input[name=Size]').val(ModalSize);
            selRow.find('input[name=ItemRemarks]').val(Remarks);


            selRow.find('label[name=label_ItemName]').text(ItemName);
            selRow.find('label[name=label_ItemUnit]').text(UnitName);
            selRow.find('label[name=label_TotalRequired]').text(ModalTotalRequired);
            selRow.find('label[name=label_TotalReceived]').text(ModalTotalReceived);
            selRow.find('label[name=label_RemainingBalance]').text(ModalRemainingBalance);
            selRow.find('label[name=label_CStockQty]').text(ModalCurrentStock);
            selRow.find('label[name=label_ReqQty]').text(Qty);
            selRow.find('label[name=label_RequiredDate]').text(ModalRequiredDate);
            selRow.find('label[name=label_Brand]').text(ModalBrand);
            selRow.find('label[name=label_Size]').text(ModalSize);
            selRow.find('label[name=label_ItemRemarks]').text(Remarks);


            $('#detailForm').modal('hide');
        }
    });

    $('#ModalClose').click(function () {
        $('#ModalItemName_Error').hide();
        $('#ModalQty_Error').hide();
        $('#ModalCurrentStock_Error').hide();
        $('#ModalBrand_Error').hide();
        $('#ModalSize_Error').hide();
        $('#ModalRemarks_Error').hide();
    });


    $('#SaveItem').click(function (e) {

        if ($.trim($('#ReqDate').val()) === "") {
            alert('Requisition date required');
            //swal('Requisition date required');
            $('#ReqDate').focus();
        }
        else if ($.trim($('#Rcode').val()) === "") {
            alert('Please insert Requisition No.');
            //swal('Please insert Requisition No.');
            $('#Rcode').focus();
        }
        else if ($('.Resource-list tr').length < 2) {
            alert('Please Add Item to this requisition');
        }
        else {
            CreateSitePlanTask();
        }
    });

    function CreateSitePlanTask() {
        var isValid = true;

        //==========Master Form==========

        //var ProjectId = document.getElementById("ProjectId");
        var ProjectId = $("#ProjectId").val();
        //RequisitionMasId
        var RequisitionMasId = $("#RequisitionMasId").val();
        //alert(RequisitionMasId);
        //alert('project Id: ' + ProjectId);
        var SiteId = $("#SiteId").val();
        //alert('Site Id: ' + SiteId);
        var RequisitionDate = $("#ReqDate").val();
        //alert('RequisitionDate: ' + RequisitionDate);
        var ReqNo = $("#Rcode").val();
        //alert('ReqNo: ' + ReqNo);
        var SiteEngineer = $("#SiteEngineer").val();
        //alert('SiteEngineer: ' + SiteEngineer);
        var Projectmanager = $("#ProjectManager").val();
        //alert('Projectmanager: ' + Projectmanager);
        var remarks = $("#Remarks").val();
        //alert('remarks: ' + remarks);

        if (ReqNo.trim().length > 20) {
            isValid = false;
            $('#ReqNO_Error').text("Req No. cannot be greater than 20 characters!").show();
        }
        else {
            $('#ReqNO_Error').hide();
        }

        if (remarks.trim().length > 50) {
            isValid = false;
            $('#ProjectRemarks_Error').text("Remarks cannot be greater than 50 characters!").show();
        }
        else {
            $('#ProjectRemarks_Error').hide();
        }

        //===========Detail Form===========
        var ProcRequisitionDetId = document.getElementsByName("TaskId");
        var ItemId = document.getElementsByName("ItemId");
        var TotalRequired = document.getElementsByName("TotalRequired");
        var TotalReceived = document.getElementsByName("TotalReceived");
        var RemainingBalance = document.getElementsByName("RemainingBalance");
        var CurrentStock = document.getElementsByName("CStockQty");
        var ReqQty = document.getElementsByName("ReqQty");
        var Brand = document.getElementsByName("Brand");
        var Size = document.getElementsByName("Size");
        var RequiredDate = document.getElementsByName("RequiredDate");
        var ItemRemarks = document.getElementsByName("ItemRemarks");

        if (isValid) {
            var RequisitionItems = [];

            var tableCounter = $('#RequisitionDetails tr').length - 1;

            for (var i = 0; i < tableCounter; i++) {
                RequisitionItems.push({
                    ProcRequisitionDetId: ProcRequisitionDetId[i].value,
                    ItemId: ItemId[i].value,
                    ReqQty: ReqQty[i].value,
                    CStockQty: CurrentStock[i].value,
                    Brand: Brand[i].value,
                    Size: Size[i].value,
                    RequiredDate: RequiredDate[i].value,
                    ItemRemarks: ItemRemarks[i].value
                });
                console.log('---------->');
                console.log('ItemId: ' + RequisitionItems[i].ItemId);
                console.log('CurrentStock: ' + RequisitionItems[i].CStockQty);
                console.log('ReqQty: ' + RequisitionItems[i].ReqQty);
                console.log('Brand: ' + RequisitionItems[i].Brand);
                console.log('Size: ' + RequisitionItems[i].Size);
                console.log('Required Date: ' + RequisitionItems[i].RequiredDate);
                console.log('ItemRemarks: ' + RequisitionItems[i].ItemRemarks);
                console.log('---------->');

            }

            TaskDetails = JSON.stringify({
                RequisitionItems: RequisitionItems,
                DeleteItems: deleteList,
                ProjectId: ProjectId,
                SiteId: SiteId,
                RequisitionDate: RequisitionDate,
                ReqNo: ReqNo,
                remarks: remarks,
                RequisitionMasId: RequisitionMasId
            });


            $.ajax({
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                type: 'POST',
                url: '/MaterialRequisition/EditRequisition',
                data: TaskDetails,
                success: function (result) {
                    console.log(result);
                    if (result.flag === true) {

                        alert("Record save successfully!");

                        $('#ProjectId').val("");
                        $('#SiteId').val("");
                        $('#RequisitionDate').val("");
                        $('#ReqNo').val("");
                        $('#SiteEngineer').val("");
                        $('#ProjectManager').val("");
                        $('#ProjectRemarks').val("");


                        window.location.replace("/MaterialRequisition/Index");


                    }
                    else {
                        alert(result.message);
                    }


                },
                failure: function (response) {
                    alert('error');
                }
            });
        }
    }



    $('#ApproveItem').click(function () {
        var Status = "A";
        var RequisitionMasId = $("#RequisitionMasId").val();
        //alert(RequisitionMasId);

        //===========Detail Form===========
        var ItemId = document.getElementsByName("ItemId");
        var TotalRequired = document.getElementsByName("TotalRequired");
        var TotalReceived = document.getElementsByName("TotalReceived");
        var RemainingBalance = document.getElementsByName("RemainingBalance");
        var CurrentStock = document.getElementsByName("CStockQty");
        var ReqQty = document.getElementsByName("ReqQty");
        var Brand = document.getElementsByName("Brand");
        var Size = document.getElementsByName("Size");
        var RequiredDate = document.getElementsByName("RequiredDate");
        var ItemRemarks = document.getElementsByName("ItemRemarks");

        var RequisitionItems = [];

        var tableCounter = $('#RequisitionDetails tr').length - 1;

        for (var i = 0; i < tableCounter; i++) {
            RequisitionItems.push({
                ItemId: ItemId[i].value,
                ReqQty: ReqQty[i].value,
                CStockQty: CurrentStock[i].value,
                Brand: Brand[i].value,
                Size: Size[i].value,
                RequiredDate: RequiredDate[i].value,
                ItemRemarks: ItemRemarks[i].value
            });
            console.log('---------->');
            console.log('ItemId: ' + RequisitionItems[i].ItemId);
            console.log('CurrentStock: ' + RequisitionItems[i].CStockQty);
            console.log('ReqQty: ' + RequisitionItems[i].ReqQty);
            console.log('Brand: ' + RequisitionItems[i].Brand);
            console.log('Size: ' + RequisitionItems[i].Size);
            console.log('Required Date: ' + RequisitionItems[i].RequiredDate);
            console.log('ItemRemarks: ' + RequisitionItems[i].ItemRemarks);
            console.log('---------->');

        }

        TaskDetails = JSON.stringify({
            RequisitionItems: RequisitionItems,
            RequisitionMasId: RequisitionMasId,
            Status: Status
        });

        $.ajax({
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            type: 'POST',
            url: '/MaterialRequisition/ApproveRequisition',
            data: TaskDetails,
            success: function (result) {
                console.log(result);
                if (result.flag === true) {
                    alert("Record approved successfully!");

                    window.location.replace("/MaterialRequisition/Index");
                }
                else {
                    alert(result.message);
                }

            },
            failure: function (response) {
                alert('error');
            }
        });
    });


    var deleteCounter = 0;
    var deleteList = [];



    $('.deleteRequisitionItem').click(function () {
        //if (retVal == true) {
        var row = $(this).closest('tr');
        var itemDetId = $(this).closest('tr').find('td input[name=TaskId]').val();
        //alert(itemDetId);

        RequisitionDelete = JSON.stringify({
            RequisitionDetailId: itemDetId
        });

        $.ajax({
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            type: 'POST',
            url: '/MaterialRequisition/DeleteRequisitionDetailItem',
            data: RequisitionDelete,
            success: function (result) {
                console.log(result);
                if (result.flag === true) {
                    deleteList[deleteCounter] = itemDetId;
                    deleteCounter++;
                    row.remove();
                }
                else {
                    alert(result.message);
                }


            },
            failure: function (response) {
                alert('error');
            }
        });

    });



    function RebindDatePicker() {
        $('.datepicker').datepicker("destroy");
        $('.datepicker').datepicker({
            format: 'dd/mm/yyyy',
            todayHighlight: true,
            autoclose: true,
            todayBtn: true,
        });

    }

    function RebindItemName() {
        var SiteId = $('#SiteId').val();
        var ProjectId = $('#ProjectId').val();

        $.ajax({
            type: "post",
            url: "/MaterialRequisition/RebindItemName",
            datatype: "json",
            data: {SiteId, ProjectId},
            traditional: true,
            success: function (data) {

                $('#ItemName').empty();
                var listOfitems = data.Items.length;
                var items = "<select id='ItemName'>";
                items = items + '<option value="">--Select--</option>';
                for (var i = 0; i < listOfitems; i++) {
                    items = items + '<option value=' + data.Items[i].Value + '>' + data.Items[i].Text + '</option>';
                }
                items = items + '</select>';
                $('#ItemName').html(items);

            }

        });
    }
</script>
<style>
    span.error {
        display: block;
        font-style: italic;
        color: #c12a2a;
        font-size: 90%;
    }
</style>