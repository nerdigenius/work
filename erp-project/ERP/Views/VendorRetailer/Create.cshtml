@model ERP.Models.UserMas

@{
    ViewBag.Title = "Create";
}

<div class="card green-top">
    <h2>Create</h2>
    <h5>Vendor</h5>
</div>

<br />

<div class="panel-body">

    @using (Html.BeginForm())
    {

        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="row">
                <div class="col-md-6">
                    <div class="card blue-top">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, "Name", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.InitialBalance, "Initial Balance", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.InitialBalance, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.InitialBalance, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Phone, "Phone", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmployeeId, "Sales Person", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("EmployeeId", null, htmlAttributes: new { @class = "form-control select2" })
                                @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card blue-top">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ContactPerson, "Contact Person", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ContactPerson, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ContactPerson, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <br />
        </div>
    }

    <div class="table-responsive card blue-top">
        <table class="table table-bordered table-xxs VendorRetailerDetailsTable" id="VendorRetailerDetails">
            <thead>
                <tr class="bg-primary-400">
                    <th style="min-width:150px;">Product Category</th>
                    <th style="min-width:150px;">Item</th>
                    <th style="min-width:150px;">Unit Price</th>
                    <th style="min-width:150px;">Location</th>
                    <th style="min-width:50px;">Carrying Cost</th>
                    <th style="min-width:50px;"></th>
                </tr>
            </thead>
            <tbody></tbody>
            <tfoot>
                <tr>
                    <td><button type="button" class="btn btn-default btn-rounded btn-xs" id="btnAddRow"><i class="icon-add position-left"></i> Add Row</button> </td>
                    <td></td>
                </tr>
            </tfoot>
        </table>
    </div>

    <div class="panel panel-primary panel-bordered">
        <div class="panel-body">
            <div class="form-group">
                <div class="col-md-12">
                    <button type="button" class="btn btn-primary" id="saveState">Save <i class="icon-arrow-right14 position-right"></i></button>
                    @*<input type="submit" value="Save" class="btn btn-primary" />*@
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

        var cnOrderTempId = 0;
        var currSelDelivRow = 0;

        $(document).ready(function () {
            $(".select2").select2();
            AddNewRow();
        });

        $('#btnAddRow').click(function () {
            AddNewRow();
        });

        function AddNewRow() {
            cnOrderTempId++;
            //debugger;
            var newRow = jQuery('<tr><td>'
                + '<input type="hidden" name = "TempOrderId" value="' + cnOrderTempId + '" class="TempOrderId" />'
                + '<select name="ProductCatId" id="current-product-row-' + cnOrderTempId + '" class="ProductCatId form-control select2 input-xs"></select></td>'
                + '<td><select name="ItemId" id="current-item-row-' + cnOrderTempId + '" class="ItemId form-control select2 input-xs relatedItem-' + cnOrderTempId + '"></select></td>'
                + '<td><input type="text" name="UnitPrice" class="UnitPrice form-control input-xs" /></td>'
                + '<td><select name="LocationId" class="LocationId form-control select2 input-xs"></select></td>'

                //  + '<td><input type="text" name="Location" class="Location form-control input-xs" /></td>'
                + '<td><input type="text" name="CarryingCost" class="CarryingCost form-control input-xs" /></td>'
                + '<td><button onclick="RemoveOrderRow(this)" type="button" class="btn  text-warning-600 btn-flat btn-icon btn-rounded"><i class="icon-cross"></i></button></td></tr>');

            //jQuery('table.FactoryCashAdjustmentTable tbody').find('tr:last').before(newRow);
            jQuery('table.VendorRetailerDetailsTable tbody').append(newRow);

            $(".select2").select2();

            $('#current-product-row-' + cnOrderTempId).on('change', function () {
                var currentProductID = $(this).attr('id');

                var matches = currentProductID.match(/\d+/g);
                matches = matches[0];

                console.log(currentProductID);
                $.ajax({
                    type: "GET",
                    url: "/ProductCategories/GetItemsUnderCategory?Id=" + this.value,
                    //data: { Id: this.value },
                    datatype: "json",
                    traditional: true,
                    success: function (productItemsList) {
                        $(".relatedItem-" + matches).empty();
                        $.each(productItemsList, function (index, item) {
                            $(".relatedItem-" + matches).append($('<option></option>').val(item.Id).text(item.Name));
                        })
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert('Error: ' + textStatus + ' - ' + errorThrown);
                    }
                });
            });


            $.ajax({
                type: "post",
                url: "/ProductCategories/GetProductCat",
                //data: { Id: selectedDeptValue },
                datatype: "json",
                traditional: true,
                success: function (data) {

                    //$('.SupplierId').empty();
                    //$('.ProductCatId').append('<option value=""></option>');
                    $.each(data.prodCatList, function (index, item) {
                        $('#current-product-row-' + cnOrderTempId).append($('<option></option>').val(item.Id).text(item.Name));
                    })

                    $.each(data.prodCatWiseItemList, function (index, item) {
                        $('#current-item-row-' + cnOrderTempId).append($('<option></option>').val(item.Id).text(item.Name));
                    })
                    //BindProductCategory();
                }
            });

            $.ajax({
                type: "post",
                url: "/ProductCategories/GetLocation",
                //data: { Id: selectedDeptValue },
                datatype: "json",
                traditional: true,
                success: function (data) {

                    //$('.SupplierId').empty();
                    //$('.LocationId').append('<option value=""></option>');
                    $.each(data, function (index, item) {
                        $('.LocationId').append($('<option></option>').val(item.Id).text(item.Name));
                    })
                    //BindProductCategory();
                }
            });

        }

        function RemoveOrderRow(e) {

            //alert($('#FactoryCashAdjustment tr').length);
            //debugger;
            if ($('#VendorRetailerDetails tr').length == 3) {
                alert('You cannot delete this row.\nOrder requires atleast one record.');
                return;
            }

            if (confirm('Do you really want to delete?') == false) {
                return;
            }

            $('#VendorRetailerDetails tr').eq(currSelDelivRow).removeClass("bg-brown");

            //var currRowIndex = $(e).closest('tr').index() + 1;

            //var id = $('#FactoryCashAdjustment tr').eq(currRowIndex).find("input.TempOrderId").val();

            $(e).parent().parent().remove();
        }

        $('#saveState').click(function () {
            if (CheckOrderGridData() == false) {

            }
            else {
                SaveOrderData();
            }
            // SaveOrderData();
        });

        function CheckOrderGridData() {
            // ProdCatId ProdTypeId styleNo unitPrice itemQnty factoryId

            var totRow = $('#VendorRetailerDetails tr').length;
            //alert(totRow);
            for (var i = 1; i <= totRow; i++) {
                if ($('#VendorRetailerDetails tr').eq(i).find(".ProductCatId").val() == "") {
                    alert('Product Category required');
                    return false;
                };

                if ($('#VendorRetailerDetails tr').eq(i).find(".ItemId").val() == "") {
                    alert('Item required');
                    return false;
                };

                if ($('#VendorRetailerDetails tr').eq(i).find(".UnitPrice").val() == "") {
                    alert('Unit price required');
                    return false;
                };

                if ($('#VendorRetailerDetails tr').eq(i).find(".LocationId").val() == "") {
                    alert('Location required');
                    return false;
                };

                if ($('#VendorRetailerDetails tr').eq(i).find(".CarryingCost").val() == "") {
                    alert('Carrying cost required');
                    return false;
                };
            }
            return true;
        }

        function SaveOrderData() {
            $("#saveState").attr("disabled", "disabled");

            var TempOrderId = document.getElementsByName("TempOrderId");
            var Email = $('#Email').val();

            //var AgreementsId = $('#AgreementsId').val();

            var EmployeeId = $('#EmployeeId').val();

            var Phone = $('#Phone').val();

            var Name = $('#Name').val();
            var ContactPerson = $('#ContactPerson').val();
            var InitialBalance = $('#InitialBalance').val();

            var ProductCatId = document.getElementsByName("ProductCatId");
            var ItemId = document.getElementsByName("ItemId");
            var UnitPrice = document.getElementsByName("UnitPrice");
            //var Location = document.getElementsByName("Location");
            var LocationId = document.getElementsByName("LocationId");

            var CarryingCost = document.getElementsByName("CarryingCost");

            //return;
            var OItems = [];

            for (var i = 0; i < ProductCatId.length; i++) {
                OItems.push({
                    TempOrderDetId: TempOrderId[i].value,
                    Id: 0,
                    ProductCategoryId: ProductCatId[i].value,
                    ItemId: ItemId[i].value,
                    UnitPrice: UnitPrice[i].value,
                    LocationId: LocationId[i].value,
                    CarryingCost: CarryingCost[i].value
                });
                console.log(OItems[i]);
            }

            OrderDetails = JSON.stringify({
                OrderDetails: OItems,
                //AgreementsId: AgreementsId,
                Name: Name,
                Phone: Phone,
                Email: Email,
                UserType: 0,
                ContactPerson: ContactPerson,
                EmployeeId: EmployeeId,
                InitialBalance: InitialBalance
            });

            $.ajax({
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                type: 'POST',
                url: '/VendorRetailer/SaveVendorRetailerOrder',
                data: OrderDetails,
                success: function (result) {
                    console.log(result);
                    $("#saveState").removeAttr("disabled");
                    if (result.flag == true) {
                        //alert("Record save successfully!");
                        window.location = "/VendorRetailer/Index/";
                    }
                    else {
                        alert(result.message);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Error: ' + textStatus + ' - ' + errorThrown);
                    $("#saveState").removeAttr("disabled");
                }
            });
        }

        $("form").submit(function (e) {
            console.log($("#BankId").val())
            if ($("#EmployeeId").val() == null) {
                alert("Sales Person field left Empty")
                e.preventDefault();
            }
        })
    </script>


}
